#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <ESP32Servo.h>

#define SERVO_PIN 18
Servo servo;

const char * WIFI_SSID = "romi";
const char * WIFI_PASS = "12345678";

const char * MQTT_BROKER_HOST = "awk0hn7csjtf1-ats.iot.us-east-2.amazonaws.com";
const int MQTT_BROKER_PORT = 8883;

const char * MQTT_CLIENT_ID = "ESP-32";                                               // Unique CLIENT_ID

const char * UPDATE_TOPIC = "$aws/things/thing/shadow/update";              // publish
const char * SUBSCRIBE_TOPIC = "$aws/things/thing/shadow/update/delta";  // subscribe

const char AMAZON_ROOT_CA1[] PROGMEM = R"EOF(
-----BEGIN CERTIFICATE-----
MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF
ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6
b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL
MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv
b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj
ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM
9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw
IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6
VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L
93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm
jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC
AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA
A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI
U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs
N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv
o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU
5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy
rqXRfboQnoZsG4q5WTP468SQvvG5
-----END CERTIFICATE-----

)EOF";

const char CERTIFICATE[] PROGMEM = R"KEY(
-----BEGIN CERTIFICATE-----
MIIDWjCCAkKgAwIBAgIVAPzQEQHC0PcnyZEiP6Lr2pF/nj5CMA0GCSqGSIb3DQEB
CwUAME0xSzBJBgNVBAsMQkFtYXpvbiBXZWIgU2VydmljZXMgTz1BbWF6b24uY29t
IEluYy4gTD1TZWF0dGxlIFNUPVdhc2hpbmd0b24gQz1VUzAeFw0yNDA1MTExNTM3
NDBaFw00OTEyMzEyMzU5NTlaMB4xHDAaBgNVBAMME0FXUyBJb1QgQ2VydGlmaWNh
dGUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBdWNec8y1IsYRrdrD
Wku7LnJLqe72zN6V6rtwsVbCoaU7jRLdbHn6ANMOAXTxxV9D4e4VnAw3FK2uI4Kg
uHCN/+RElXIdbyS6MgeJkT8h9cnCXwnCb+I+lDf03x1WmSxQ5UULRnMDPBdcMnJk
3wcJLOtH/9IpXaWnuuiuJude9VSKzpgOsqWeP2ZSozSP9WaVvrsw2Sl3OQcCacCs
tBy2jxZcbsIfE8f9tHES6RdIgJAdJTz6EzP/9gBA5QLvj/Ygn/dIBqux+m4qo/1y
C03O0l01nnRDInfseNY9RDLmoolt12cafHG7j9w+WmFw7V1usFze7RZ0T2sGaULV
ATp3AgMBAAGjYDBeMB8GA1UdIwQYMBaAFO8OodPcgtU6l6MzTS5D3npU3zU+MB0G
A1UdDgQWBBS+zt8iSFpREwcxlMuklvYsFBMGLTAMBgNVHRMBAf8EAjAAMA4GA1Ud
DwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEAXuABehiQ+wEe5vejjXP5QFTF
KSqRxtv4RQ/3sGkbWO9HQCeh1+7nGEgOfSn+zqJzatcsTa5YmPk8gCHvK+FpSvCJ
PYZZ2tbw5UG/NfUHgdLZYGdVuNgsuM5WiN6OK54BDFtMIvpWwkh8MS7cbpkoQO8c
WUm6/nTpHQcoXcnOapz7DM9q797raTCyclcI+mfEHhrxuf2OHqWxPlL8zIFJAlo5
RSHD2kL7vCp569CB6ESC99n9Ei0o3ugKNktHCjth5dS9ST5oLobYspYoEG0TiU1L
uq02n6rNlpu1s2THDVX3nFp3YbelJftQ6p8h72JlD9A+34CD/KeI693SH5g99g==
-----END CERTIFICATE-----
)KEY";

const char PRIVATE_KEY[] PROGMEM = R"KEY(
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAwXVjXnPMtSLGEa3aw1pLuy5yS6nu9szeleq7cLFWwqGlO40S
3Wx5+gDTDgF08cVfQ+HuFZwMNxStriOCoLhwjf/kRJVyHW8kujIHiZE/IfXJwl8J
wm/iPpQ39N8dVpksUOVFC0ZzAzwXXDJyZN8HCSzrR//SKV2lp7roribnXvVUis6Y
DrKlnj9mUqM0j/Vmlb67MNkpdzkHAmnArLQcto8WXG7CHxPH/bRxEukXSICQHSU8
+hMz//YAQOUC74/2IJ/3SAarsfpuKqP9cgtNztJdNZ50QyJ37HjWPUQy5qKJbddn
Gnxxu4/cPlphcO1dbrBc3u0WdE9rBmlC1QE6dwIDAQABAoIBABBi0ALdDha9lkdD
EYeAa2+0VGwCPcJbwfKyyiOWccHUjTlJDrMAkChTz4ydJPmhfRsz1MWxzPsRXlCk
o1jXpnjwlrYUbnD9y/+VYzwMuGs49VjoUdxNO72PMlokV8jQ+obzlHCLDAzXFydx
Am120pK9YkRb78IfM3vMgg7WLrzFJvGblpfkHOpByhcrD0hpgJnOf9CPKgdJ5bWN
QmmEYDvVExPfSBJ1sw6ofgHE5POanXDCIZHVll20Gx8m6RFfCiF47+X63XPs8nVU
2VnWr0OypsQ8hG0k7Lt2Hwpll41NNiYHTnfb39TVXoO+bYv/lY+aHZN95u1zY1Kc
HbKu0WkCgYEA+GXvwOmHnNEjyqixXYrgiNxgNCESpdCU+VZJv55ek+Tkn5UJjPBi
ddkKrS7prD42yHVoRzQ20kelIAR5GL7c6sexKSC3/qdoOLefNmC7KaYQcSEML2Uz
rCQlQYROrVGCMP6hx+Cmizwz9uvD1IW54gQVlKNu5YjYj8c0es/ssXMCgYEAx2EH
mWrdnIuuJ4qIEirQ13vju7m4d6OxVd9FaEcpOgpIymSYK6XfI1z+aCZ1QxRFBxib
saiRnZFHSp4wmN8crVXumo0xR2hDmzftdOZr/d0gz61M7GHn4lD69yj/BkGSX8GO
DZQGtRKamZeJcIlhERs0ZHOYpLSRzLhKlLMyge0CgYB/Qnpas0ovJVbY9SQpcIUo
mP8QtgD/wqUQOQz/hvudeZ9HwutpsZ5AEjpOD8LX4+fdO4l5MV8EzH/kr2X7L42v
Gy/Aimq5pLrYk/qVuWkqJVI3I19CyO54Oux7bHWChkfVIh9wb7/jhax5zMA/mWNq
T/1ecXzXTAznXH+ei/gP0QKBgQCBHMyXBSVN4wZ8hLFpUmC7qnbncnWKxG5qdZO0
26BO/an1pv8EBP5jIC1/tKfrMI0i80Sf39GsgA/yuk4uMQ2ZEjTZ0OVAoLxnH+id
8zmrxC8jTc6qpRxM6rQaqmm722q2p9kd4eYWDF4haIiQX+aD9WIQSutmfaiNMirZ
8NGcYQKBgQCNF14hbl35j6rmuhQR5sHY2B/bXGUHV+QIAYCN5SU3agBOBB7fcVSs
RUp+9tI3MUErRSBgkWR5GVl265+AX2y8vI9klZuqWMzvtxSU2Wf/N+Si291pGGih
qHrD5JLtjTPA1S43zyGjI66cFSO7mTKRR+Y9qUFIAE0m/ludpFcd1g==
-----END RSA PRIVATE KEY-----
)KEY";

int LED = 2;

WiFiClientSecure wiFiClient;
PubSubClient mqttClient(wiFiClient);

StaticJsonDocument<JSON_OBJECT_SIZE(64)> inputDoc;

StaticJsonDocument<JSON_OBJECT_SIZE(4)> outputDoc;
char outputBuffer[128];

unsigned char DOOR_STATUS = 0;//  ESTADO_PUERTA
int echoPin = 27; //es el pin del sensor echo
int triggerPin = 26; //es el pin de trig del sensor
float DISTANCE = 0;//DISTANCE



void liftServo() {
  // Mueve el servo a 90 grados levantarServo
  servo.write(90);
}
// Función para bajar el servo a 0 grados   lowerServo   bajarServo     
void lowerServo() {
  // Mueve el servo a 0 grados
  servo.write(0);
}
long readUltrasonicDistance(int triggerPin, int echoPin) {
  pinMode(triggerPin, OUTPUT); 
  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerPin, LOW);
  pinMode(echoPin, INPUT);
  // Leer el pulso y medir la duración del eco
  long duration = pulseIn(echoPin, HIGH);
  // Retardo ajustable entre las lecturas del sensor ultrasónico
  delay(500); // Ajusta este valor según sea necesario
  return duration;
}

//reporta si la puerta est 1=abierta o 0 =cerrada
void reportdoor() {
  outputDoc["state"]["reported"]["ESTADO_PUERTA"] = DOOR_STATUS;//mandamos el 0 o el 1
  serializeJson(outputDoc, outputBuffer);
  mqttClient.publish(UPDATE_TOPIC, outputBuffer);
}


void door() {
  if (DOOR_STATUS) 
  {
    digitalWrite(LED, HIGH);
    // Llama a la función que levanta el servo a 90 grados   levantarServo
     liftServo();
    // Espera un segundo
    delay(500);
  }else{
    digitalWrite(LED, LOW);
      // Llama a la función que baja el servo a 0 grados
    lowerServo();
    // Espera un segundo
    delay(500);
  }
  reportdoor();
}

void callback(const char * topic, byte * payload, unsigned int length) {
  String message;
  for (int i = 0; i < length; i++) message += String((char) payload[i]);
  Serial.println("Message from topic " + String(topic) + ":" + message);
  DeserializationError err = deserializeJson(inputDoc, payload);
  if (!err) {
    if (String(topic) == SUBSCRIBE_TOPIC) {
      unsigned char newEstadoPuerta = inputDoc["state"]["ESTADO_PUERTA"].as<int8_t>();
        if (newEstadoPuerta != DOOR_STATUS) 
        {
          DOOR_STATUS = newEstadoPuerta;
          door();
        }
    }
  }
}
 
void setup() {
  pinMode(LED, OUTPUT);
  Serial.begin(115200);
  servo.attach(SERVO_PIN);//--------------------------------
  Serial.print("Connecting to " + String(WIFI_SSID));
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(200);
    Serial.print(".");
  }
  Serial.println(" Connected!");

  wiFiClient.setCACert(AMAZON_ROOT_CA1);
  wiFiClient.setCertificate(CERTIFICATE);
  wiFiClient.setPrivateKey(PRIVATE_KEY);

  mqttClient.setServer(MQTT_BROKER_HOST, MQTT_BROKER_PORT);
  mqttClient.setCallback(callback);

  Serial.print("Connecting to " + String(MQTT_BROKER_HOST));
  if (mqttClient.connect(MQTT_CLIENT_ID)) {
    Serial.println(" Connected!");

    delay(100);
    mqttClient.subscribe(SUBSCRIBE_TOPIC);
    Serial.println("Subscribed to " + String(SUBSCRIBE_TOPIC));

    delay(100);
    reportdoor();
  }
}
 
unsigned long previousPublishMillis = 0;

float previousDistance = 0.0;

void loop() {
  DISTANCE = 0.01723 * readUltrasonicDistance(triggerPin, echoPin);
 Serial.print("DISTANCE*: ");
 Serial.println(DISTANCE);
  //DISTANCIA = 0.01723 * readUltrasonicDistance(triggerPin, echoPin);
  if (mqttClient.connected()) {
    unsigned long now =millis();

    if(now - previousPublishMillis >= 500)
    {
      previousPublishMillis = now;
      if (DISTANCE != previousDistance) 
      {
        // Actualizar la variable de distancia anterior
        previousDistance = DISTANCE;
        
        outputDoc["state"]["reported"]["DISTANCIA"] = DISTANCE;
        serializeJson(outputDoc,outputBuffer);
        mqttClient.publish(UPDATE_TOPIC,outputBuffer);
        Serial.print("DISTANCE: ");
        Serial.println(DISTANCE);
      }
      
    }
    mqttClient.loop();
  }
  else {
    if(mqttClient.connected())
    {
      mqttClient.loop();
    }
    else{
      Serial.println("MQTT broker not connected!");
      delay(2000);
    }
    
    
  }
}
